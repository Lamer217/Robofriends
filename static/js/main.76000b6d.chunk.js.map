{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","Searchbox.jsx","Scroll.jsx","ErrorBoundary.jsx","App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","user","index","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","boxShadow","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","console","log","ReactDOM","render","document","getElementById"],"mappings":"uLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCOCQ,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,kBACpD,gCACE,oBAAIF,UAAU,KAAd,SAAoBH,IACpB,mBAAGG,UAAU,KAAb,SAAmBF,WCYZK,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,mCACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,OAHhBS,SCSFC,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKT,UAAU,SAAf,SACE,uBACEU,KAAK,SACLV,UAAU,uCACVH,KAAK,YACLE,GAAG,YACHY,YAAY,sBACZC,SAAUH,OCMHI,G,MAdA,SAAAC,GACb,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,OACRC,UAAW,wBAJf,SAOGJ,EAAMK,aCSEC,E,kDAnBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,iEAEFG,KAAKX,MAAMK,a,GAhBMQ,aCsDbC,E,kDA9Cb,aAAe,IAAD,8BACZ,gBAoBFC,eAAiB,SAAAC,GAEf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IANH,E,qDAWd,WAAqB,IAAD,OAClBG,MAAM,8CACH5C,MAAK,SAAA6C,GAAQ,OAAIA,EAASC,UAC1B9C,MAAK,SAAA+C,GACJ,EAAKX,SAAS,CAAEtB,OAAQiC,S,oBAW9B,WAAU,IAAD,OACDC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAC,GAC9C,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAGlE,OADAE,QAAQC,IAAIN,GAEV,sBAAKtC,UAAU,KAAf,UACE,6CACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UAEE,cAAC,EAAD,CAAUzB,OAAQkC,e,GAvCZX,aCFlBkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjD7D,M","file":"static/js/main.76000b6d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"Friend avatar\" />\r\n      <div>\r\n        <h2 className=\"tc\">{name}</h2>\r\n        <p className=\"tc\">{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <>\r\n      {robots.map((user, index) => {\r\n        return (\r\n          <Card\r\n            key={index}\r\n            id={robots[index].id}\r\n            name={robots[index].name}\r\n            email={robots[index].email}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\n/* IDK why but this things (below) have to be destructured all the time */\r\nconst Searchbox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"db pa1\">\r\n      <input\r\n        type=\"search\"\r\n        className=\"pa2 ba b--green bg-lightest-blue br2\"\r\n        name=\"Searchbox\"\r\n        id=\"Searchbox\"\r\n        placeholder=\"Search a Robofriend\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\n/* PROPS are used to give access to a property from\r\na parent element to its children */\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        height: '70vh',\r\n        boxShadow: '0 -1px 10px  #10ff51',\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops! This looks like an error.</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\n// Have to destructure for files that don't have \"export default\", like robots.js there\r\n// import { robots } from './robots';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    /*     State is something that can change and\r\n    effect uor app. It usualy lives in a parent component*/\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: '',\r\n    };\r\n    /* Components with STATE are called smart components */\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  /* Below custom function that will get logged when\r\ndata in searchfield is changed */\r\n  onSearchChange = event => {\r\n    /* Use this syntax every time you vant to change state */\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    console.log(filteredRobots);\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1>RoboFriends</h1>\r\n        <Searchbox searchChange={this.onSearchChange} />\r\n        <ErrorBoundary>\r\n          <Scroll>\r\n            {/* Below I parse roborts to the cardlist component */}\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}